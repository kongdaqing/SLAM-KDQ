// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rovio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rovio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rovio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rovio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rovio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rovio_2eproto;
namespace rovio {
class InputInfo;
class InputInfoDefaultTypeInternal;
extern InputInfoDefaultTypeInternal _InputInfo_default_instance_;
class InputInfoPack;
class InputInfoPackDefaultTypeInternal;
extern InputInfoPackDefaultTypeInternal _InputInfoPack_default_instance_;
class Mat3f;
class Mat3fDefaultTypeInternal;
extern Mat3fDefaultTypeInternal _Mat3f_default_instance_;
class OutputInfo;
class OutputInfoDefaultTypeInternal;
extern OutputInfoDefaultTypeInternal _OutputInfo_default_instance_;
class Quatf;
class QuatfDefaultTypeInternal;
extern QuatfDefaultTypeInternal _Quatf_default_instance_;
class Vec3f;
class Vec3fDefaultTypeInternal;
extern Vec3fDefaultTypeInternal _Vec3f_default_instance_;
}  // namespace rovio
PROTOBUF_NAMESPACE_OPEN
template<> ::rovio::InputInfo* Arena::CreateMaybeMessage<::rovio::InputInfo>(Arena*);
template<> ::rovio::InputInfoPack* Arena::CreateMaybeMessage<::rovio::InputInfoPack>(Arena*);
template<> ::rovio::Mat3f* Arena::CreateMaybeMessage<::rovio::Mat3f>(Arena*);
template<> ::rovio::OutputInfo* Arena::CreateMaybeMessage<::rovio::OutputInfo>(Arena*);
template<> ::rovio::Quatf* Arena::CreateMaybeMessage<::rovio::Quatf>(Arena*);
template<> ::rovio::Vec3f* Arena::CreateMaybeMessage<::rovio::Vec3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rovio {

enum RovioStatus : int {
  GOOD = 0,
  BAD = 1,
  RovioStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RovioStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RovioStatus_IsValid(int value);
constexpr RovioStatus RovioStatus_MIN = GOOD;
constexpr RovioStatus RovioStatus_MAX = BAD;
constexpr int RovioStatus_ARRAYSIZE = RovioStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RovioStatus_descriptor();
template<typename T>
inline const std::string& RovioStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RovioStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RovioStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RovioStatus_descriptor(), enum_t_value);
}
inline bool RovioStatus_Parse(
    const std::string& name, RovioStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RovioStatus>(
    RovioStatus_descriptor(), name, value);
}
enum RovioErrCode : int {
  NoErr = 0,
  TooDarked = 1,
  CameraNoCalibrated = 2,
  BothErr = 3,
  RovioErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RovioErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RovioErrCode_IsValid(int value);
constexpr RovioErrCode RovioErrCode_MIN = NoErr;
constexpr RovioErrCode RovioErrCode_MAX = BothErr;
constexpr int RovioErrCode_ARRAYSIZE = RovioErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RovioErrCode_descriptor();
template<typename T>
inline const std::string& RovioErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RovioErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RovioErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RovioErrCode_descriptor(), enum_t_value);
}
inline bool RovioErrCode_Parse(
    const std::string& name, RovioErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RovioErrCode>(
    RovioErrCode_descriptor(), name, value);
}
// ===================================================================

class Vec3f :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.Vec3f) */ {
 public:
  Vec3f();
  virtual ~Vec3f();

  Vec3f(const Vec3f& from);
  Vec3f(Vec3f&& from) noexcept
    : Vec3f() {
    *this = ::std::move(from);
  }

  inline Vec3f& operator=(const Vec3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3f& operator=(Vec3f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3f* internal_default_instance() {
    return reinterpret_cast<const Vec3f*>(
               &_Vec3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec3f& a, Vec3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3f* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3f* New() const final {
    return CreateMaybeMessage<Vec3f>(nullptr);
  }

  Vec3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3f& from);
  void MergeFrom(const Vec3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.Vec3f";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:rovio.Vec3f)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// -------------------------------------------------------------------

class Mat3f :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.Mat3f) */ {
 public:
  Mat3f();
  virtual ~Mat3f();

  Mat3f(const Mat3f& from);
  Mat3f(Mat3f&& from) noexcept
    : Mat3f() {
    *this = ::std::move(from);
  }

  inline Mat3f& operator=(const Mat3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mat3f& operator=(Mat3f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mat3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mat3f* internal_default_instance() {
    return reinterpret_cast<const Mat3f*>(
               &_Mat3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mat3f& a, Mat3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Mat3f* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mat3f* New() const final {
    return CreateMaybeMessage<Mat3f>(nullptr);
  }

  Mat3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mat3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mat3f& from);
  void MergeFrom(const Mat3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mat3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.Mat3f";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXxFieldNumber = 1,
    kXyFieldNumber = 2,
    kXzFieldNumber = 3,
    kYxFieldNumber = 4,
    kYyFieldNumber = 5,
    kYzFieldNumber = 6,
    kZxFieldNumber = 7,
    kZyFieldNumber = 8,
    kZzFieldNumber = 9,
  };
  // float xx = 1;
  void clear_xx();
  float xx() const;
  void set_xx(float value);
  private:
  float _internal_xx() const;
  void _internal_set_xx(float value);
  public:

  // float xy = 2;
  void clear_xy();
  float xy() const;
  void set_xy(float value);
  private:
  float _internal_xy() const;
  void _internal_set_xy(float value);
  public:

  // float xz = 3;
  void clear_xz();
  float xz() const;
  void set_xz(float value);
  private:
  float _internal_xz() const;
  void _internal_set_xz(float value);
  public:

  // float yx = 4;
  void clear_yx();
  float yx() const;
  void set_yx(float value);
  private:
  float _internal_yx() const;
  void _internal_set_yx(float value);
  public:

  // float yy = 5;
  void clear_yy();
  float yy() const;
  void set_yy(float value);
  private:
  float _internal_yy() const;
  void _internal_set_yy(float value);
  public:

  // float yz = 6;
  void clear_yz();
  float yz() const;
  void set_yz(float value);
  private:
  float _internal_yz() const;
  void _internal_set_yz(float value);
  public:

  // float zx = 7;
  void clear_zx();
  float zx() const;
  void set_zx(float value);
  private:
  float _internal_zx() const;
  void _internal_set_zx(float value);
  public:

  // float zy = 8;
  void clear_zy();
  float zy() const;
  void set_zy(float value);
  private:
  float _internal_zy() const;
  void _internal_set_zy(float value);
  public:

  // float zz = 9;
  void clear_zz();
  float zz() const;
  void set_zz(float value);
  private:
  float _internal_zz() const;
  void _internal_set_zz(float value);
  public:

  // @@protoc_insertion_point(class_scope:rovio.Mat3f)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float xx_;
  float xy_;
  float xz_;
  float yx_;
  float yy_;
  float yz_;
  float zx_;
  float zy_;
  float zz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// -------------------------------------------------------------------

class Quatf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.Quatf) */ {
 public:
  Quatf();
  virtual ~Quatf();

  Quatf(const Quatf& from);
  Quatf(Quatf&& from) noexcept
    : Quatf() {
    *this = ::std::move(from);
  }

  inline Quatf& operator=(const Quatf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quatf& operator=(Quatf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quatf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quatf* internal_default_instance() {
    return reinterpret_cast<const Quatf*>(
               &_Quatf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quatf& a, Quatf& b) {
    a.Swap(&b);
  }
  inline void Swap(Quatf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quatf* New() const final {
    return CreateMaybeMessage<Quatf>(nullptr);
  }

  Quatf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quatf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quatf& from);
  void MergeFrom(const Quatf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quatf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.Quatf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:rovio.Quatf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// -------------------------------------------------------------------

class InputInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.InputInfo) */ {
 public:
  InputInfo();
  virtual ~InputInfo();

  InputInfo(const InputInfo& from);
  InputInfo(InputInfo&& from) noexcept
    : InputInfo() {
    *this = ::std::move(from);
  }

  inline InputInfo& operator=(const InputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputInfo& operator=(InputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputInfo* internal_default_instance() {
    return reinterpret_cast<const InputInfo*>(
               &_InputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InputInfo& a, InputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InputInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputInfo* New() const final {
    return CreateMaybeMessage<InputInfo>(nullptr);
  }

  InputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputInfo& from);
  void MergeFrom(const InputInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.InputInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyrFieldNumber = 2,
    kAccFieldNumber = 3,
    kQuatFieldNumber = 4,
    kTFieldNumber = 1,
    kProxiFieldNumber = 5,
  };
  // .rovio.Vec3f gyr = 2;
  bool has_gyr() const;
  private:
  bool _internal_has_gyr() const;
  public:
  void clear_gyr();
  const ::rovio::Vec3f& gyr() const;
  ::rovio::Vec3f* release_gyr();
  ::rovio::Vec3f* mutable_gyr();
  void set_allocated_gyr(::rovio::Vec3f* gyr);
  private:
  const ::rovio::Vec3f& _internal_gyr() const;
  ::rovio::Vec3f* _internal_mutable_gyr();
  public:

  // .rovio.Vec3f acc = 3;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::rovio::Vec3f& acc() const;
  ::rovio::Vec3f* release_acc();
  ::rovio::Vec3f* mutable_acc();
  void set_allocated_acc(::rovio::Vec3f* acc);
  private:
  const ::rovio::Vec3f& _internal_acc() const;
  ::rovio::Vec3f* _internal_mutable_acc();
  public:

  // .rovio.Quatf quat = 4;
  bool has_quat() const;
  private:
  bool _internal_has_quat() const;
  public:
  void clear_quat();
  const ::rovio::Quatf& quat() const;
  ::rovio::Quatf* release_quat();
  ::rovio::Quatf* mutable_quat();
  void set_allocated_quat(::rovio::Quatf* quat);
  private:
  const ::rovio::Quatf& _internal_quat() const;
  ::rovio::Quatf* _internal_mutable_quat();
  public:

  // double t = 1;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // float proxi = 5;
  void clear_proxi();
  float proxi() const;
  void set_proxi(float value);
  private:
  float _internal_proxi() const;
  void _internal_set_proxi(float value);
  public:

  // @@protoc_insertion_point(class_scope:rovio.InputInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rovio::Vec3f* gyr_;
  ::rovio::Vec3f* acc_;
  ::rovio::Quatf* quat_;
  double t_;
  float proxi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// -------------------------------------------------------------------

class InputInfoPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.InputInfoPack) */ {
 public:
  InputInfoPack();
  virtual ~InputInfoPack();

  InputInfoPack(const InputInfoPack& from);
  InputInfoPack(InputInfoPack&& from) noexcept
    : InputInfoPack() {
    *this = ::std::move(from);
  }

  inline InputInfoPack& operator=(const InputInfoPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputInfoPack& operator=(InputInfoPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputInfoPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputInfoPack* internal_default_instance() {
    return reinterpret_cast<const InputInfoPack*>(
               &_InputInfoPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InputInfoPack& a, InputInfoPack& b) {
    a.Swap(&b);
  }
  inline void Swap(InputInfoPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputInfoPack* New() const final {
    return CreateMaybeMessage<InputInfoPack>(nullptr);
  }

  InputInfoPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputInfoPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputInfoPack& from);
  void MergeFrom(const InputInfoPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputInfoPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.InputInfoPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .rovio.InputInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::rovio::InputInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rovio::InputInfo >*
      mutable_info();
  private:
  const ::rovio::InputInfo& _internal_info(int index) const;
  ::rovio::InputInfo* _internal_add_info();
  public:
  const ::rovio::InputInfo& info(int index) const;
  ::rovio::InputInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rovio::InputInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:rovio.InputInfoPack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rovio::InputInfo > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// -------------------------------------------------------------------

class OutputInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rovio.OutputInfo) */ {
 public:
  OutputInfo();
  virtual ~OutputInfo();

  OutputInfo(const OutputInfo& from);
  OutputInfo(OutputInfo&& from) noexcept
    : OutputInfo() {
    *this = ::std::move(from);
  }

  inline OutputInfo& operator=(const OutputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputInfo& operator=(OutputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputInfo* internal_default_instance() {
    return reinterpret_cast<const OutputInfo*>(
               &_OutputInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OutputInfo& a, OutputInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputInfo* New() const final {
    return CreateMaybeMessage<OutputInfo>(nullptr);
  }

  OutputInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputInfo& from);
  void MergeFrom(const OutputInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rovio.OutputInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rovio_2eproto);
    return ::descriptor_table_rovio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kQuaternionFieldNumber = 5,
    kGyrBiasFieldNumber = 6,
    kAccBiasFieldNumber = 7,
    kPosCovFieldNumber = 8,
    kVelCovFieldNumber = 9,
    kAttCovFieldNumber = 10,
    kTimestampFieldNumber = 2,
    kStatusFieldNumber = 1,
    kDepthFieldNumber = 11,
    kErrCodeFieldNumber = 12,
  };
  // .rovio.Vec3f position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::rovio::Vec3f& position() const;
  ::rovio::Vec3f* release_position();
  ::rovio::Vec3f* mutable_position();
  void set_allocated_position(::rovio::Vec3f* position);
  private:
  const ::rovio::Vec3f& _internal_position() const;
  ::rovio::Vec3f* _internal_mutable_position();
  public:

  // .rovio.Vec3f velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::rovio::Vec3f& velocity() const;
  ::rovio::Vec3f* release_velocity();
  ::rovio::Vec3f* mutable_velocity();
  void set_allocated_velocity(::rovio::Vec3f* velocity);
  private:
  const ::rovio::Vec3f& _internal_velocity() const;
  ::rovio::Vec3f* _internal_mutable_velocity();
  public:

  // .rovio.Quatf quaternion = 5;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::rovio::Quatf& quaternion() const;
  ::rovio::Quatf* release_quaternion();
  ::rovio::Quatf* mutable_quaternion();
  void set_allocated_quaternion(::rovio::Quatf* quaternion);
  private:
  const ::rovio::Quatf& _internal_quaternion() const;
  ::rovio::Quatf* _internal_mutable_quaternion();
  public:

  // .rovio.Vec3f gyr_bias = 6;
  bool has_gyr_bias() const;
  private:
  bool _internal_has_gyr_bias() const;
  public:
  void clear_gyr_bias();
  const ::rovio::Vec3f& gyr_bias() const;
  ::rovio::Vec3f* release_gyr_bias();
  ::rovio::Vec3f* mutable_gyr_bias();
  void set_allocated_gyr_bias(::rovio::Vec3f* gyr_bias);
  private:
  const ::rovio::Vec3f& _internal_gyr_bias() const;
  ::rovio::Vec3f* _internal_mutable_gyr_bias();
  public:

  // .rovio.Vec3f acc_bias = 7;
  bool has_acc_bias() const;
  private:
  bool _internal_has_acc_bias() const;
  public:
  void clear_acc_bias();
  const ::rovio::Vec3f& acc_bias() const;
  ::rovio::Vec3f* release_acc_bias();
  ::rovio::Vec3f* mutable_acc_bias();
  void set_allocated_acc_bias(::rovio::Vec3f* acc_bias);
  private:
  const ::rovio::Vec3f& _internal_acc_bias() const;
  ::rovio::Vec3f* _internal_mutable_acc_bias();
  public:

  // .rovio.Vec3f pos_cov = 8;
  bool has_pos_cov() const;
  private:
  bool _internal_has_pos_cov() const;
  public:
  void clear_pos_cov();
  const ::rovio::Vec3f& pos_cov() const;
  ::rovio::Vec3f* release_pos_cov();
  ::rovio::Vec3f* mutable_pos_cov();
  void set_allocated_pos_cov(::rovio::Vec3f* pos_cov);
  private:
  const ::rovio::Vec3f& _internal_pos_cov() const;
  ::rovio::Vec3f* _internal_mutable_pos_cov();
  public:

  // .rovio.Mat3f vel_cov = 9;
  bool has_vel_cov() const;
  private:
  bool _internal_has_vel_cov() const;
  public:
  void clear_vel_cov();
  const ::rovio::Mat3f& vel_cov() const;
  ::rovio::Mat3f* release_vel_cov();
  ::rovio::Mat3f* mutable_vel_cov();
  void set_allocated_vel_cov(::rovio::Mat3f* vel_cov);
  private:
  const ::rovio::Mat3f& _internal_vel_cov() const;
  ::rovio::Mat3f* _internal_mutable_vel_cov();
  public:

  // .rovio.Vec3f att_cov = 10;
  bool has_att_cov() const;
  private:
  bool _internal_has_att_cov() const;
  public:
  void clear_att_cov();
  const ::rovio::Vec3f& att_cov() const;
  ::rovio::Vec3f* release_att_cov();
  ::rovio::Vec3f* mutable_att_cov();
  void set_allocated_att_cov(::rovio::Vec3f* att_cov);
  private:
  const ::rovio::Vec3f& _internal_att_cov() const;
  ::rovio::Vec3f* _internal_mutable_att_cov();
  public:

  // double timestamp = 2;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // .rovio.RovioStatus status = 1;
  void clear_status();
  ::rovio::RovioStatus status() const;
  void set_status(::rovio::RovioStatus value);
  private:
  ::rovio::RovioStatus _internal_status() const;
  void _internal_set_status(::rovio::RovioStatus value);
  public:

  // float depth = 11;
  void clear_depth();
  float depth() const;
  void set_depth(float value);
  private:
  float _internal_depth() const;
  void _internal_set_depth(float value);
  public:

  // .rovio.RovioErrCode err_code = 12;
  void clear_err_code();
  ::rovio::RovioErrCode err_code() const;
  void set_err_code(::rovio::RovioErrCode value);
  private:
  ::rovio::RovioErrCode _internal_err_code() const;
  void _internal_set_err_code(::rovio::RovioErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:rovio.OutputInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rovio::Vec3f* position_;
  ::rovio::Vec3f* velocity_;
  ::rovio::Quatf* quaternion_;
  ::rovio::Vec3f* gyr_bias_;
  ::rovio::Vec3f* acc_bias_;
  ::rovio::Vec3f* pos_cov_;
  ::rovio::Mat3f* vel_cov_;
  ::rovio::Vec3f* att_cov_;
  double timestamp_;
  int status_;
  float depth_;
  int err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rovio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3f

// float x = 1;
inline void Vec3f::clear_x() {
  x_ = 0;
}
inline float Vec3f::_internal_x() const {
  return x_;
}
inline float Vec3f::x() const {
  // @@protoc_insertion_point(field_get:rovio.Vec3f.x)
  return _internal_x();
}
inline void Vec3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rovio.Vec3f.x)
}

// float y = 2;
inline void Vec3f::clear_y() {
  y_ = 0;
}
inline float Vec3f::_internal_y() const {
  return y_;
}
inline float Vec3f::y() const {
  // @@protoc_insertion_point(field_get:rovio.Vec3f.y)
  return _internal_y();
}
inline void Vec3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rovio.Vec3f.y)
}

// float z = 3;
inline void Vec3f::clear_z() {
  z_ = 0;
}
inline float Vec3f::_internal_z() const {
  return z_;
}
inline float Vec3f::z() const {
  // @@protoc_insertion_point(field_get:rovio.Vec3f.z)
  return _internal_z();
}
inline void Vec3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vec3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:rovio.Vec3f.z)
}

// -------------------------------------------------------------------

// Mat3f

// float xx = 1;
inline void Mat3f::clear_xx() {
  xx_ = 0;
}
inline float Mat3f::_internal_xx() const {
  return xx_;
}
inline float Mat3f::xx() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.xx)
  return _internal_xx();
}
inline void Mat3f::_internal_set_xx(float value) {
  
  xx_ = value;
}
inline void Mat3f::set_xx(float value) {
  _internal_set_xx(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.xx)
}

// float xy = 2;
inline void Mat3f::clear_xy() {
  xy_ = 0;
}
inline float Mat3f::_internal_xy() const {
  return xy_;
}
inline float Mat3f::xy() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.xy)
  return _internal_xy();
}
inline void Mat3f::_internal_set_xy(float value) {
  
  xy_ = value;
}
inline void Mat3f::set_xy(float value) {
  _internal_set_xy(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.xy)
}

// float xz = 3;
inline void Mat3f::clear_xz() {
  xz_ = 0;
}
inline float Mat3f::_internal_xz() const {
  return xz_;
}
inline float Mat3f::xz() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.xz)
  return _internal_xz();
}
inline void Mat3f::_internal_set_xz(float value) {
  
  xz_ = value;
}
inline void Mat3f::set_xz(float value) {
  _internal_set_xz(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.xz)
}

// float yx = 4;
inline void Mat3f::clear_yx() {
  yx_ = 0;
}
inline float Mat3f::_internal_yx() const {
  return yx_;
}
inline float Mat3f::yx() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.yx)
  return _internal_yx();
}
inline void Mat3f::_internal_set_yx(float value) {
  
  yx_ = value;
}
inline void Mat3f::set_yx(float value) {
  _internal_set_yx(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.yx)
}

// float yy = 5;
inline void Mat3f::clear_yy() {
  yy_ = 0;
}
inline float Mat3f::_internal_yy() const {
  return yy_;
}
inline float Mat3f::yy() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.yy)
  return _internal_yy();
}
inline void Mat3f::_internal_set_yy(float value) {
  
  yy_ = value;
}
inline void Mat3f::set_yy(float value) {
  _internal_set_yy(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.yy)
}

// float yz = 6;
inline void Mat3f::clear_yz() {
  yz_ = 0;
}
inline float Mat3f::_internal_yz() const {
  return yz_;
}
inline float Mat3f::yz() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.yz)
  return _internal_yz();
}
inline void Mat3f::_internal_set_yz(float value) {
  
  yz_ = value;
}
inline void Mat3f::set_yz(float value) {
  _internal_set_yz(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.yz)
}

// float zx = 7;
inline void Mat3f::clear_zx() {
  zx_ = 0;
}
inline float Mat3f::_internal_zx() const {
  return zx_;
}
inline float Mat3f::zx() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.zx)
  return _internal_zx();
}
inline void Mat3f::_internal_set_zx(float value) {
  
  zx_ = value;
}
inline void Mat3f::set_zx(float value) {
  _internal_set_zx(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.zx)
}

// float zy = 8;
inline void Mat3f::clear_zy() {
  zy_ = 0;
}
inline float Mat3f::_internal_zy() const {
  return zy_;
}
inline float Mat3f::zy() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.zy)
  return _internal_zy();
}
inline void Mat3f::_internal_set_zy(float value) {
  
  zy_ = value;
}
inline void Mat3f::set_zy(float value) {
  _internal_set_zy(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.zy)
}

// float zz = 9;
inline void Mat3f::clear_zz() {
  zz_ = 0;
}
inline float Mat3f::_internal_zz() const {
  return zz_;
}
inline float Mat3f::zz() const {
  // @@protoc_insertion_point(field_get:rovio.Mat3f.zz)
  return _internal_zz();
}
inline void Mat3f::_internal_set_zz(float value) {
  
  zz_ = value;
}
inline void Mat3f::set_zz(float value) {
  _internal_set_zz(value);
  // @@protoc_insertion_point(field_set:rovio.Mat3f.zz)
}

// -------------------------------------------------------------------

// Quatf

// float w = 1;
inline void Quatf::clear_w() {
  w_ = 0;
}
inline float Quatf::_internal_w() const {
  return w_;
}
inline float Quatf::w() const {
  // @@protoc_insertion_point(field_get:rovio.Quatf.w)
  return _internal_w();
}
inline void Quatf::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quatf::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:rovio.Quatf.w)
}

// float x = 2;
inline void Quatf::clear_x() {
  x_ = 0;
}
inline float Quatf::_internal_x() const {
  return x_;
}
inline float Quatf::x() const {
  // @@protoc_insertion_point(field_get:rovio.Quatf.x)
  return _internal_x();
}
inline void Quatf::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quatf::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rovio.Quatf.x)
}

// float y = 3;
inline void Quatf::clear_y() {
  y_ = 0;
}
inline float Quatf::_internal_y() const {
  return y_;
}
inline float Quatf::y() const {
  // @@protoc_insertion_point(field_get:rovio.Quatf.y)
  return _internal_y();
}
inline void Quatf::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quatf::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rovio.Quatf.y)
}

// float z = 4;
inline void Quatf::clear_z() {
  z_ = 0;
}
inline float Quatf::_internal_z() const {
  return z_;
}
inline float Quatf::z() const {
  // @@protoc_insertion_point(field_get:rovio.Quatf.z)
  return _internal_z();
}
inline void Quatf::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quatf::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:rovio.Quatf.z)
}

// -------------------------------------------------------------------

// InputInfo

// double t = 1;
inline void InputInfo::clear_t() {
  t_ = 0;
}
inline double InputInfo::_internal_t() const {
  return t_;
}
inline double InputInfo::t() const {
  // @@protoc_insertion_point(field_get:rovio.InputInfo.t)
  return _internal_t();
}
inline void InputInfo::_internal_set_t(double value) {
  
  t_ = value;
}
inline void InputInfo::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:rovio.InputInfo.t)
}

// .rovio.Vec3f gyr = 2;
inline bool InputInfo::_internal_has_gyr() const {
  return this != internal_default_instance() && gyr_ != nullptr;
}
inline bool InputInfo::has_gyr() const {
  return _internal_has_gyr();
}
inline void InputInfo::clear_gyr() {
  if (GetArenaNoVirtual() == nullptr && gyr_ != nullptr) {
    delete gyr_;
  }
  gyr_ = nullptr;
}
inline const ::rovio::Vec3f& InputInfo::_internal_gyr() const {
  const ::rovio::Vec3f* p = gyr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& InputInfo::gyr() const {
  // @@protoc_insertion_point(field_get:rovio.InputInfo.gyr)
  return _internal_gyr();
}
inline ::rovio::Vec3f* InputInfo::release_gyr() {
  // @@protoc_insertion_point(field_release:rovio.InputInfo.gyr)
  
  ::rovio::Vec3f* temp = gyr_;
  gyr_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* InputInfo::_internal_mutable_gyr() {
  
  if (gyr_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    gyr_ = p;
  }
  return gyr_;
}
inline ::rovio::Vec3f* InputInfo::mutable_gyr() {
  // @@protoc_insertion_point(field_mutable:rovio.InputInfo.gyr)
  return _internal_mutable_gyr();
}
inline void InputInfo::set_allocated_gyr(::rovio::Vec3f* gyr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gyr_;
  }
  if (gyr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gyr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyr, submessage_arena);
    }
    
  } else {
    
  }
  gyr_ = gyr;
  // @@protoc_insertion_point(field_set_allocated:rovio.InputInfo.gyr)
}

// .rovio.Vec3f acc = 3;
inline bool InputInfo::_internal_has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline bool InputInfo::has_acc() const {
  return _internal_has_acc();
}
inline void InputInfo::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
inline const ::rovio::Vec3f& InputInfo::_internal_acc() const {
  const ::rovio::Vec3f* p = acc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& InputInfo::acc() const {
  // @@protoc_insertion_point(field_get:rovio.InputInfo.acc)
  return _internal_acc();
}
inline ::rovio::Vec3f* InputInfo::release_acc() {
  // @@protoc_insertion_point(field_release:rovio.InputInfo.acc)
  
  ::rovio::Vec3f* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* InputInfo::_internal_mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    acc_ = p;
  }
  return acc_;
}
inline ::rovio::Vec3f* InputInfo::mutable_acc() {
  // @@protoc_insertion_point(field_mutable:rovio.InputInfo.acc)
  return _internal_mutable_acc();
}
inline void InputInfo::set_allocated_acc(::rovio::Vec3f* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:rovio.InputInfo.acc)
}

// .rovio.Quatf quat = 4;
inline bool InputInfo::_internal_has_quat() const {
  return this != internal_default_instance() && quat_ != nullptr;
}
inline bool InputInfo::has_quat() const {
  return _internal_has_quat();
}
inline void InputInfo::clear_quat() {
  if (GetArenaNoVirtual() == nullptr && quat_ != nullptr) {
    delete quat_;
  }
  quat_ = nullptr;
}
inline const ::rovio::Quatf& InputInfo::_internal_quat() const {
  const ::rovio::Quatf* p = quat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Quatf*>(
      &::rovio::_Quatf_default_instance_);
}
inline const ::rovio::Quatf& InputInfo::quat() const {
  // @@protoc_insertion_point(field_get:rovio.InputInfo.quat)
  return _internal_quat();
}
inline ::rovio::Quatf* InputInfo::release_quat() {
  // @@protoc_insertion_point(field_release:rovio.InputInfo.quat)
  
  ::rovio::Quatf* temp = quat_;
  quat_ = nullptr;
  return temp;
}
inline ::rovio::Quatf* InputInfo::_internal_mutable_quat() {
  
  if (quat_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Quatf>(GetArenaNoVirtual());
    quat_ = p;
  }
  return quat_;
}
inline ::rovio::Quatf* InputInfo::mutable_quat() {
  // @@protoc_insertion_point(field_mutable:rovio.InputInfo.quat)
  return _internal_mutable_quat();
}
inline void InputInfo::set_allocated_quat(::rovio::Quatf* quat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quat_;
  }
  if (quat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quat, submessage_arena);
    }
    
  } else {
    
  }
  quat_ = quat;
  // @@protoc_insertion_point(field_set_allocated:rovio.InputInfo.quat)
}

// float proxi = 5;
inline void InputInfo::clear_proxi() {
  proxi_ = 0;
}
inline float InputInfo::_internal_proxi() const {
  return proxi_;
}
inline float InputInfo::proxi() const {
  // @@protoc_insertion_point(field_get:rovio.InputInfo.proxi)
  return _internal_proxi();
}
inline void InputInfo::_internal_set_proxi(float value) {
  
  proxi_ = value;
}
inline void InputInfo::set_proxi(float value) {
  _internal_set_proxi(value);
  // @@protoc_insertion_point(field_set:rovio.InputInfo.proxi)
}

// -------------------------------------------------------------------

// InputInfoPack

// repeated .rovio.InputInfo info = 1;
inline int InputInfoPack::_internal_info_size() const {
  return info_.size();
}
inline int InputInfoPack::info_size() const {
  return _internal_info_size();
}
inline void InputInfoPack::clear_info() {
  info_.Clear();
}
inline ::rovio::InputInfo* InputInfoPack::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:rovio.InputInfoPack.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rovio::InputInfo >*
InputInfoPack::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:rovio.InputInfoPack.info)
  return &info_;
}
inline const ::rovio::InputInfo& InputInfoPack::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::rovio::InputInfo& InputInfoPack::info(int index) const {
  // @@protoc_insertion_point(field_get:rovio.InputInfoPack.info)
  return _internal_info(index);
}
inline ::rovio::InputInfo* InputInfoPack::_internal_add_info() {
  return info_.Add();
}
inline ::rovio::InputInfo* InputInfoPack::add_info() {
  // @@protoc_insertion_point(field_add:rovio.InputInfoPack.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rovio::InputInfo >&
InputInfoPack::info() const {
  // @@protoc_insertion_point(field_list:rovio.InputInfoPack.info)
  return info_;
}

// -------------------------------------------------------------------

// OutputInfo

// .rovio.RovioStatus status = 1;
inline void OutputInfo::clear_status() {
  status_ = 0;
}
inline ::rovio::RovioStatus OutputInfo::_internal_status() const {
  return static_cast< ::rovio::RovioStatus >(status_);
}
inline ::rovio::RovioStatus OutputInfo::status() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.status)
  return _internal_status();
}
inline void OutputInfo::_internal_set_status(::rovio::RovioStatus value) {
  
  status_ = value;
}
inline void OutputInfo::set_status(::rovio::RovioStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rovio.OutputInfo.status)
}

// double timestamp = 2;
inline void OutputInfo::clear_timestamp() {
  timestamp_ = 0;
}
inline double OutputInfo::_internal_timestamp() const {
  return timestamp_;
}
inline double OutputInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.timestamp)
  return _internal_timestamp();
}
inline void OutputInfo::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void OutputInfo::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:rovio.OutputInfo.timestamp)
}

// .rovio.Vec3f position = 3;
inline bool OutputInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool OutputInfo::has_position() const {
  return _internal_has_position();
}
inline void OutputInfo::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_position() const {
  const ::rovio::Vec3f* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::position() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.position)
  return _internal_position();
}
inline ::rovio::Vec3f* OutputInfo::release_position() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.position)
  
  ::rovio::Vec3f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.position)
  return _internal_mutable_position();
}
inline void OutputInfo::set_allocated_position(::rovio::Vec3f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.position)
}

// .rovio.Vec3f velocity = 4;
inline bool OutputInfo::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool OutputInfo::has_velocity() const {
  return _internal_has_velocity();
}
inline void OutputInfo::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_velocity() const {
  const ::rovio::Vec3f* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::velocity() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.velocity)
  return _internal_velocity();
}
inline ::rovio::Vec3f* OutputInfo::release_velocity() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.velocity)
  
  ::rovio::Vec3f* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.velocity)
  return _internal_mutable_velocity();
}
inline void OutputInfo::set_allocated_velocity(::rovio::Vec3f* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.velocity)
}

// .rovio.Quatf quaternion = 5;
inline bool OutputInfo::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool OutputInfo::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void OutputInfo::clear_quaternion() {
  if (GetArenaNoVirtual() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
inline const ::rovio::Quatf& OutputInfo::_internal_quaternion() const {
  const ::rovio::Quatf* p = quaternion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Quatf*>(
      &::rovio::_Quatf_default_instance_);
}
inline const ::rovio::Quatf& OutputInfo::quaternion() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.quaternion)
  return _internal_quaternion();
}
inline ::rovio::Quatf* OutputInfo::release_quaternion() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.quaternion)
  
  ::rovio::Quatf* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::rovio::Quatf* OutputInfo::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Quatf>(GetArenaNoVirtual());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::rovio::Quatf* OutputInfo::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.quaternion)
  return _internal_mutable_quaternion();
}
inline void OutputInfo::set_allocated_quaternion(::rovio::Quatf* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.quaternion)
}

// .rovio.Vec3f gyr_bias = 6;
inline bool OutputInfo::_internal_has_gyr_bias() const {
  return this != internal_default_instance() && gyr_bias_ != nullptr;
}
inline bool OutputInfo::has_gyr_bias() const {
  return _internal_has_gyr_bias();
}
inline void OutputInfo::clear_gyr_bias() {
  if (GetArenaNoVirtual() == nullptr && gyr_bias_ != nullptr) {
    delete gyr_bias_;
  }
  gyr_bias_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_gyr_bias() const {
  const ::rovio::Vec3f* p = gyr_bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::gyr_bias() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.gyr_bias)
  return _internal_gyr_bias();
}
inline ::rovio::Vec3f* OutputInfo::release_gyr_bias() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.gyr_bias)
  
  ::rovio::Vec3f* temp = gyr_bias_;
  gyr_bias_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_gyr_bias() {
  
  if (gyr_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    gyr_bias_ = p;
  }
  return gyr_bias_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_gyr_bias() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.gyr_bias)
  return _internal_mutable_gyr_bias();
}
inline void OutputInfo::set_allocated_gyr_bias(::rovio::Vec3f* gyr_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gyr_bias_;
  }
  if (gyr_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gyr_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyr_bias, submessage_arena);
    }
    
  } else {
    
  }
  gyr_bias_ = gyr_bias;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.gyr_bias)
}

// .rovio.Vec3f acc_bias = 7;
inline bool OutputInfo::_internal_has_acc_bias() const {
  return this != internal_default_instance() && acc_bias_ != nullptr;
}
inline bool OutputInfo::has_acc_bias() const {
  return _internal_has_acc_bias();
}
inline void OutputInfo::clear_acc_bias() {
  if (GetArenaNoVirtual() == nullptr && acc_bias_ != nullptr) {
    delete acc_bias_;
  }
  acc_bias_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_acc_bias() const {
  const ::rovio::Vec3f* p = acc_bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::acc_bias() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.acc_bias)
  return _internal_acc_bias();
}
inline ::rovio::Vec3f* OutputInfo::release_acc_bias() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.acc_bias)
  
  ::rovio::Vec3f* temp = acc_bias_;
  acc_bias_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_acc_bias() {
  
  if (acc_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    acc_bias_ = p;
  }
  return acc_bias_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_acc_bias() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.acc_bias)
  return _internal_mutable_acc_bias();
}
inline void OutputInfo::set_allocated_acc_bias(::rovio::Vec3f* acc_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_bias_;
  }
  if (acc_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_bias, submessage_arena);
    }
    
  } else {
    
  }
  acc_bias_ = acc_bias;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.acc_bias)
}

// .rovio.Vec3f pos_cov = 8;
inline bool OutputInfo::_internal_has_pos_cov() const {
  return this != internal_default_instance() && pos_cov_ != nullptr;
}
inline bool OutputInfo::has_pos_cov() const {
  return _internal_has_pos_cov();
}
inline void OutputInfo::clear_pos_cov() {
  if (GetArenaNoVirtual() == nullptr && pos_cov_ != nullptr) {
    delete pos_cov_;
  }
  pos_cov_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_pos_cov() const {
  const ::rovio::Vec3f* p = pos_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::pos_cov() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.pos_cov)
  return _internal_pos_cov();
}
inline ::rovio::Vec3f* OutputInfo::release_pos_cov() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.pos_cov)
  
  ::rovio::Vec3f* temp = pos_cov_;
  pos_cov_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_pos_cov() {
  
  if (pos_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    pos_cov_ = p;
  }
  return pos_cov_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_pos_cov() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.pos_cov)
  return _internal_mutable_pos_cov();
}
inline void OutputInfo::set_allocated_pos_cov(::rovio::Vec3f* pos_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_cov_;
  }
  if (pos_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_cov, submessage_arena);
    }
    
  } else {
    
  }
  pos_cov_ = pos_cov;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.pos_cov)
}

// .rovio.Mat3f vel_cov = 9;
inline bool OutputInfo::_internal_has_vel_cov() const {
  return this != internal_default_instance() && vel_cov_ != nullptr;
}
inline bool OutputInfo::has_vel_cov() const {
  return _internal_has_vel_cov();
}
inline void OutputInfo::clear_vel_cov() {
  if (GetArenaNoVirtual() == nullptr && vel_cov_ != nullptr) {
    delete vel_cov_;
  }
  vel_cov_ = nullptr;
}
inline const ::rovio::Mat3f& OutputInfo::_internal_vel_cov() const {
  const ::rovio::Mat3f* p = vel_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Mat3f*>(
      &::rovio::_Mat3f_default_instance_);
}
inline const ::rovio::Mat3f& OutputInfo::vel_cov() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.vel_cov)
  return _internal_vel_cov();
}
inline ::rovio::Mat3f* OutputInfo::release_vel_cov() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.vel_cov)
  
  ::rovio::Mat3f* temp = vel_cov_;
  vel_cov_ = nullptr;
  return temp;
}
inline ::rovio::Mat3f* OutputInfo::_internal_mutable_vel_cov() {
  
  if (vel_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Mat3f>(GetArenaNoVirtual());
    vel_cov_ = p;
  }
  return vel_cov_;
}
inline ::rovio::Mat3f* OutputInfo::mutable_vel_cov() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.vel_cov)
  return _internal_mutable_vel_cov();
}
inline void OutputInfo::set_allocated_vel_cov(::rovio::Mat3f* vel_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vel_cov_;
  }
  if (vel_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vel_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_cov, submessage_arena);
    }
    
  } else {
    
  }
  vel_cov_ = vel_cov;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.vel_cov)
}

// .rovio.Vec3f att_cov = 10;
inline bool OutputInfo::_internal_has_att_cov() const {
  return this != internal_default_instance() && att_cov_ != nullptr;
}
inline bool OutputInfo::has_att_cov() const {
  return _internal_has_att_cov();
}
inline void OutputInfo::clear_att_cov() {
  if (GetArenaNoVirtual() == nullptr && att_cov_ != nullptr) {
    delete att_cov_;
  }
  att_cov_ = nullptr;
}
inline const ::rovio::Vec3f& OutputInfo::_internal_att_cov() const {
  const ::rovio::Vec3f* p = att_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rovio::Vec3f*>(
      &::rovio::_Vec3f_default_instance_);
}
inline const ::rovio::Vec3f& OutputInfo::att_cov() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.att_cov)
  return _internal_att_cov();
}
inline ::rovio::Vec3f* OutputInfo::release_att_cov() {
  // @@protoc_insertion_point(field_release:rovio.OutputInfo.att_cov)
  
  ::rovio::Vec3f* temp = att_cov_;
  att_cov_ = nullptr;
  return temp;
}
inline ::rovio::Vec3f* OutputInfo::_internal_mutable_att_cov() {
  
  if (att_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::rovio::Vec3f>(GetArenaNoVirtual());
    att_cov_ = p;
  }
  return att_cov_;
}
inline ::rovio::Vec3f* OutputInfo::mutable_att_cov() {
  // @@protoc_insertion_point(field_mutable:rovio.OutputInfo.att_cov)
  return _internal_mutable_att_cov();
}
inline void OutputInfo::set_allocated_att_cov(::rovio::Vec3f* att_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete att_cov_;
  }
  if (att_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      att_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, att_cov, submessage_arena);
    }
    
  } else {
    
  }
  att_cov_ = att_cov;
  // @@protoc_insertion_point(field_set_allocated:rovio.OutputInfo.att_cov)
}

// float depth = 11;
inline void OutputInfo::clear_depth() {
  depth_ = 0;
}
inline float OutputInfo::_internal_depth() const {
  return depth_;
}
inline float OutputInfo::depth() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.depth)
  return _internal_depth();
}
inline void OutputInfo::_internal_set_depth(float value) {
  
  depth_ = value;
}
inline void OutputInfo::set_depth(float value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:rovio.OutputInfo.depth)
}

// .rovio.RovioErrCode err_code = 12;
inline void OutputInfo::clear_err_code() {
  err_code_ = 0;
}
inline ::rovio::RovioErrCode OutputInfo::_internal_err_code() const {
  return static_cast< ::rovio::RovioErrCode >(err_code_);
}
inline ::rovio::RovioErrCode OutputInfo::err_code() const {
  // @@protoc_insertion_point(field_get:rovio.OutputInfo.err_code)
  return _internal_err_code();
}
inline void OutputInfo::_internal_set_err_code(::rovio::RovioErrCode value) {
  
  err_code_ = value;
}
inline void OutputInfo::set_err_code(::rovio::RovioErrCode value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:rovio.OutputInfo.err_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rovio

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rovio::RovioStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rovio::RovioStatus>() {
  return ::rovio::RovioStatus_descriptor();
}
template <> struct is_proto_enum< ::rovio::RovioErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rovio::RovioErrCode>() {
  return ::rovio::RovioErrCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rovio_2eproto
