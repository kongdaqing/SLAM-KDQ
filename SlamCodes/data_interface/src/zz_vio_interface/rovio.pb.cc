// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rovio.proto

#include "zz_vio_interface/rovio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rovio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputInfo_rovio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rovio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mat3f_rovio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rovio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quatf_rovio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rovio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3f_rovio_2eproto;
namespace rovio {
class Vec3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3f> _instance;
} _Vec3f_default_instance_;
class Mat3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mat3f> _instance;
} _Mat3f_default_instance_;
class QuatfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quatf> _instance;
} _Quatf_default_instance_;
class InputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputInfo> _instance;
} _InputInfo_default_instance_;
class InputInfoPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputInfoPack> _instance;
} _InputInfoPack_default_instance_;
class OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputInfo> _instance;
} _OutputInfo_default_instance_;
}  // namespace rovio
static void InitDefaultsscc_info_InputInfo_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_InputInfo_default_instance_;
    new (ptr) ::rovio::InputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::InputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputInfo_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InputInfo_rovio_2eproto}, {
      &scc_info_Vec3f_rovio_2eproto.base,
      &scc_info_Quatf_rovio_2eproto.base,}};

static void InitDefaultsscc_info_InputInfoPack_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_InputInfoPack_default_instance_;
    new (ptr) ::rovio::InputInfoPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::InputInfoPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputInfoPack_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputInfoPack_rovio_2eproto}, {
      &scc_info_InputInfo_rovio_2eproto.base,}};

static void InitDefaultsscc_info_Mat3f_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_Mat3f_default_instance_;
    new (ptr) ::rovio::Mat3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::Mat3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mat3f_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mat3f_rovio_2eproto}, {}};

static void InitDefaultsscc_info_OutputInfo_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_OutputInfo_default_instance_;
    new (ptr) ::rovio::OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OutputInfo_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OutputInfo_rovio_2eproto}, {
      &scc_info_Vec3f_rovio_2eproto.base,
      &scc_info_Quatf_rovio_2eproto.base,
      &scc_info_Mat3f_rovio_2eproto.base,}};

static void InitDefaultsscc_info_Quatf_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_Quatf_default_instance_;
    new (ptr) ::rovio::Quatf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::Quatf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quatf_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quatf_rovio_2eproto}, {}};

static void InitDefaultsscc_info_Vec3f_rovio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rovio::_Vec3f_default_instance_;
    new (ptr) ::rovio::Vec3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rovio::Vec3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3f_rovio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3f_rovio_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rovio_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rovio_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rovio_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rovio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::Vec3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::Vec3f, x_),
  PROTOBUF_FIELD_OFFSET(::rovio::Vec3f, y_),
  PROTOBUF_FIELD_OFFSET(::rovio::Vec3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, xx_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, xy_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, xz_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, yx_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, yy_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, yz_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, zx_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, zy_),
  PROTOBUF_FIELD_OFFSET(::rovio::Mat3f, zz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::Quatf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::Quatf, w_),
  PROTOBUF_FIELD_OFFSET(::rovio::Quatf, x_),
  PROTOBUF_FIELD_OFFSET(::rovio::Quatf, y_),
  PROTOBUF_FIELD_OFFSET(::rovio::Quatf, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, t_),
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, gyr_),
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, acc_),
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, quat_),
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfo, proxi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfoPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::InputInfoPack, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, status_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, position_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, velocity_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, quaternion_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, gyr_bias_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, acc_bias_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, pos_cov_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, vel_cov_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, att_cov_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, depth_),
  PROTOBUF_FIELD_OFFSET(::rovio::OutputInfo, err_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rovio::Vec3f)},
  { 8, -1, sizeof(::rovio::Mat3f)},
  { 22, -1, sizeof(::rovio::Quatf)},
  { 31, -1, sizeof(::rovio::InputInfo)},
  { 41, -1, sizeof(::rovio::InputInfoPack)},
  { 47, -1, sizeof(::rovio::OutputInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_Vec3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_Mat3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_Quatf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_InputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_InputInfoPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rovio::_OutputInfo_default_instance_),
};

const char descriptor_table_protodef_rovio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013rovio.proto\022\005rovio\"(\n\005Vec3f\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"s\n\005Mat3f\022\n\n\002xx\030\001 "
  "\001(\002\022\n\n\002xy\030\002 \001(\002\022\n\n\002xz\030\003 \001(\002\022\n\n\002yx\030\004 \001(\002\022"
  "\n\n\002yy\030\005 \001(\002\022\n\n\002yz\030\006 \001(\002\022\n\n\002zx\030\007 \001(\002\022\n\n\002z"
  "y\030\010 \001(\002\022\n\n\002zz\030\t \001(\002\"3\n\005Quatf\022\t\n\001w\030\001 \001(\002\022"
  "\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"w\n\tInpu"
  "tInfo\022\t\n\001t\030\001 \001(\001\022\031\n\003gyr\030\002 \001(\0132\014.rovio.Ve"
  "c3f\022\031\n\003acc\030\003 \001(\0132\014.rovio.Vec3f\022\032\n\004quat\030\004"
  " \001(\0132\014.rovio.Quatf\022\r\n\005proxi\030\005 \001(\002\"/\n\rInp"
  "utInfoPack\022\036\n\004info\030\001 \003(\0132\020.rovio.InputIn"
  "fo\"\370\002\n\nOutputInfo\022\"\n\006status\030\001 \001(\0162\022.rovi"
  "o.RovioStatus\022\021\n\ttimestamp\030\002 \001(\001\022\036\n\010posi"
  "tion\030\003 \001(\0132\014.rovio.Vec3f\022\036\n\010velocity\030\004 \001"
  "(\0132\014.rovio.Vec3f\022 \n\nquaternion\030\005 \001(\0132\014.r"
  "ovio.Quatf\022\036\n\010gyr_bias\030\006 \001(\0132\014.rovio.Vec"
  "3f\022\036\n\010acc_bias\030\007 \001(\0132\014.rovio.Vec3f\022\035\n\007po"
  "s_cov\030\010 \001(\0132\014.rovio.Vec3f\022\035\n\007vel_cov\030\t \001"
  "(\0132\014.rovio.Mat3f\022\035\n\007att_cov\030\n \001(\0132\014.rovi"
  "o.Vec3f\022\r\n\005depth\030\013 \001(\002\022%\n\010err_code\030\014 \001(\016"
  "2\023.rovio.RovioErrCode* \n\013RovioStatus\022\010\n\004"
  "GOOD\020\000\022\007\n\003BAD\020\001*M\n\014RovioErrCode\022\t\n\005NoErr"
  "\020\000\022\r\n\tTooDarked\020\001\022\026\n\022CameraNoCalibrated\020"
  "\002\022\013\n\007BothErr\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rovio_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rovio_2eproto_sccs[6] = {
  &scc_info_InputInfo_rovio_2eproto.base,
  &scc_info_InputInfoPack_rovio_2eproto.base,
  &scc_info_Mat3f_rovio_2eproto.base,
  &scc_info_OutputInfo_rovio_2eproto.base,
  &scc_info_Quatf_rovio_2eproto.base,
  &scc_info_Vec3f_rovio_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rovio_2eproto_once;
static bool descriptor_table_rovio_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rovio_2eproto = {
  &descriptor_table_rovio_2eproto_initialized, descriptor_table_protodef_rovio_2eproto, "rovio.proto", 902,
  &descriptor_table_rovio_2eproto_once, descriptor_table_rovio_2eproto_sccs, descriptor_table_rovio_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_rovio_2eproto::offsets,
  file_level_metadata_rovio_2eproto, 6, file_level_enum_descriptors_rovio_2eproto, file_level_service_descriptors_rovio_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rovio_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rovio_2eproto), true);
namespace rovio {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RovioStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rovio_2eproto);
  return file_level_enum_descriptors_rovio_2eproto[0];
}
bool RovioStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RovioErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rovio_2eproto);
  return file_level_enum_descriptors_rovio_2eproto[1];
}
bool RovioErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vec3f::InitAsDefaultInstance() {
}
class Vec3f::_Internal {
 public:
};

Vec3f::Vec3f()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.Vec3f)
}
Vec3f::Vec3f(const Vec3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rovio.Vec3f)
}

void Vec3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3f::~Vec3f() {
  // @@protoc_insertion_point(destructor:rovio.Vec3f)
  SharedDtor();
}

void Vec3f::SharedDtor() {
}

void Vec3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3f& Vec3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3f_rovio_2eproto.base);
  return *internal_default_instance();
}


void Vec3f::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.Vec3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Vec3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.Vec3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.Vec3f)
  return target;
}

size_t Vec3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.Vec3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.Vec3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.Vec3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.Vec3f)
    MergeFrom(*source);
  }
}

void Vec3f::MergeFrom(const Vec3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.Vec3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.Vec3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3f::CopyFrom(const Vec3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.Vec3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3f::IsInitialized() const {
  return true;
}

void Vec3f::InternalSwap(Vec3f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mat3f::InitAsDefaultInstance() {
}
class Mat3f::_Internal {
 public:
};

Mat3f::Mat3f()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.Mat3f)
}
Mat3f::Mat3f(const Mat3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xx_, &from.xx_,
    static_cast<size_t>(reinterpret_cast<char*>(&zz_) -
    reinterpret_cast<char*>(&xx_)) + sizeof(zz_));
  // @@protoc_insertion_point(copy_constructor:rovio.Mat3f)
}

void Mat3f::SharedCtor() {
  ::memset(&xx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zz_) -
      reinterpret_cast<char*>(&xx_)) + sizeof(zz_));
}

Mat3f::~Mat3f() {
  // @@protoc_insertion_point(destructor:rovio.Mat3f)
  SharedDtor();
}

void Mat3f::SharedDtor() {
}

void Mat3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mat3f& Mat3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mat3f_rovio_2eproto.base);
  return *internal_default_instance();
}


void Mat3f::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.Mat3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zz_) -
      reinterpret_cast<char*>(&xx_)) + sizeof(zz_));
  _internal_metadata_.Clear();
}

const char* Mat3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float xx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          xx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          xz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          yz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          zx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          zy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zz = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          zz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mat3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.Mat3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xx = 1;
  if (!(this->xx() <= 0 && this->xx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xx(), target);
  }

  // float xy = 2;
  if (!(this->xy() <= 0 && this->xy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_xy(), target);
  }

  // float xz = 3;
  if (!(this->xz() <= 0 && this->xz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xz(), target);
  }

  // float yx = 4;
  if (!(this->yx() <= 0 && this->yx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yx(), target);
  }

  // float yy = 5;
  if (!(this->yy() <= 0 && this->yy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yy(), target);
  }

  // float yz = 6;
  if (!(this->yz() <= 0 && this->yz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_yz(), target);
  }

  // float zx = 7;
  if (!(this->zx() <= 0 && this->zx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_zx(), target);
  }

  // float zy = 8;
  if (!(this->zy() <= 0 && this->zy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_zy(), target);
  }

  // float zz = 9;
  if (!(this->zz() <= 0 && this->zz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_zz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.Mat3f)
  return target;
}

size_t Mat3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.Mat3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float xx = 1;
  if (!(this->xx() <= 0 && this->xx() >= 0)) {
    total_size += 1 + 4;
  }

  // float xy = 2;
  if (!(this->xy() <= 0 && this->xy() >= 0)) {
    total_size += 1 + 4;
  }

  // float xz = 3;
  if (!(this->xz() <= 0 && this->xz() >= 0)) {
    total_size += 1 + 4;
  }

  // float yx = 4;
  if (!(this->yx() <= 0 && this->yx() >= 0)) {
    total_size += 1 + 4;
  }

  // float yy = 5;
  if (!(this->yy() <= 0 && this->yy() >= 0)) {
    total_size += 1 + 4;
  }

  // float yz = 6;
  if (!(this->yz() <= 0 && this->yz() >= 0)) {
    total_size += 1 + 4;
  }

  // float zx = 7;
  if (!(this->zx() <= 0 && this->zx() >= 0)) {
    total_size += 1 + 4;
  }

  // float zy = 8;
  if (!(this->zy() <= 0 && this->zy() >= 0)) {
    total_size += 1 + 4;
  }

  // float zz = 9;
  if (!(this->zz() <= 0 && this->zz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mat3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.Mat3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Mat3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mat3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.Mat3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.Mat3f)
    MergeFrom(*source);
  }
}

void Mat3f::MergeFrom(const Mat3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.Mat3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.xx() <= 0 && from.xx() >= 0)) {
    _internal_set_xx(from._internal_xx());
  }
  if (!(from.xy() <= 0 && from.xy() >= 0)) {
    _internal_set_xy(from._internal_xy());
  }
  if (!(from.xz() <= 0 && from.xz() >= 0)) {
    _internal_set_xz(from._internal_xz());
  }
  if (!(from.yx() <= 0 && from.yx() >= 0)) {
    _internal_set_yx(from._internal_yx());
  }
  if (!(from.yy() <= 0 && from.yy() >= 0)) {
    _internal_set_yy(from._internal_yy());
  }
  if (!(from.yz() <= 0 && from.yz() >= 0)) {
    _internal_set_yz(from._internal_yz());
  }
  if (!(from.zx() <= 0 && from.zx() >= 0)) {
    _internal_set_zx(from._internal_zx());
  }
  if (!(from.zy() <= 0 && from.zy() >= 0)) {
    _internal_set_zy(from._internal_zy());
  }
  if (!(from.zz() <= 0 && from.zz() >= 0)) {
    _internal_set_zz(from._internal_zz());
  }
}

void Mat3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.Mat3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat3f::CopyFrom(const Mat3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.Mat3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat3f::IsInitialized() const {
  return true;
}

void Mat3f::InternalSwap(Mat3f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(xx_, other->xx_);
  swap(xy_, other->xy_);
  swap(xz_, other->xz_);
  swap(yx_, other->yx_);
  swap(yy_, other->yy_);
  swap(yz_, other->yz_);
  swap(zx_, other->zx_);
  swap(zy_, other->zy_);
  swap(zz_, other->zz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mat3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quatf::InitAsDefaultInstance() {
}
class Quatf::_Internal {
 public:
};

Quatf::Quatf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.Quatf)
}
Quatf::Quatf(const Quatf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rovio.Quatf)
}

void Quatf::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quatf::~Quatf() {
  // @@protoc_insertion_point(destructor:rovio.Quatf)
  SharedDtor();
}

void Quatf::SharedDtor() {
}

void Quatf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quatf& Quatf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quatf_rovio_2eproto.base);
  return *internal_default_instance();
}


void Quatf::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.Quatf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Quatf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quatf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.Quatf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.Quatf)
  return target;
}

size_t Quatf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.Quatf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quatf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.Quatf)
  GOOGLE_DCHECK_NE(&from, this);
  const Quatf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quatf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.Quatf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.Quatf)
    MergeFrom(*source);
  }
}

void Quatf::MergeFrom(const Quatf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.Quatf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Quatf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.Quatf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quatf::CopyFrom(const Quatf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.Quatf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quatf::IsInitialized() const {
  return true;
}

void Quatf::InternalSwap(Quatf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Quatf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputInfo::InitAsDefaultInstance() {
  ::rovio::_InputInfo_default_instance_._instance.get_mutable()->gyr_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_InputInfo_default_instance_._instance.get_mutable()->acc_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_InputInfo_default_instance_._instance.get_mutable()->quat_ = const_cast< ::rovio::Quatf*>(
      ::rovio::Quatf::internal_default_instance());
}
class InputInfo::_Internal {
 public:
  static const ::rovio::Vec3f& gyr(const InputInfo* msg);
  static const ::rovio::Vec3f& acc(const InputInfo* msg);
  static const ::rovio::Quatf& quat(const InputInfo* msg);
};

const ::rovio::Vec3f&
InputInfo::_Internal::gyr(const InputInfo* msg) {
  return *msg->gyr_;
}
const ::rovio::Vec3f&
InputInfo::_Internal::acc(const InputInfo* msg) {
  return *msg->acc_;
}
const ::rovio::Quatf&
InputInfo::_Internal::quat(const InputInfo* msg) {
  return *msg->quat_;
}
InputInfo::InputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.InputInfo)
}
InputInfo::InputInfo(const InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gyr()) {
    gyr_ = new ::rovio::Vec3f(*from.gyr_);
  } else {
    gyr_ = nullptr;
  }
  if (from._internal_has_acc()) {
    acc_ = new ::rovio::Vec3f(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from._internal_has_quat()) {
    quat_ = new ::rovio::Quatf(*from.quat_);
  } else {
    quat_ = nullptr;
  }
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxi_) -
    reinterpret_cast<char*>(&t_)) + sizeof(proxi_));
  // @@protoc_insertion_point(copy_constructor:rovio.InputInfo)
}

void InputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputInfo_rovio_2eproto.base);
  ::memset(&gyr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxi_) -
      reinterpret_cast<char*>(&gyr_)) + sizeof(proxi_));
}

InputInfo::~InputInfo() {
  // @@protoc_insertion_point(destructor:rovio.InputInfo)
  SharedDtor();
}

void InputInfo::SharedDtor() {
  if (this != internal_default_instance()) delete gyr_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete quat_;
}

void InputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputInfo& InputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputInfo_rovio_2eproto.base);
  return *internal_default_instance();
}


void InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gyr_ != nullptr) {
    delete gyr_;
  }
  gyr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quat_ != nullptr) {
    delete quat_;
  }
  quat_ = nullptr;
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxi_) -
      reinterpret_cast<char*>(&t_)) + sizeof(proxi_));
  _internal_metadata_.Clear();
}

const char* InputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f gyr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f acc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Quatf quat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_quat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float proxi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          proxi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(), target);
  }

  // .rovio.Vec3f gyr = 2;
  if (this->has_gyr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gyr(this), target, stream);
  }

  // .rovio.Vec3f acc = 3;
  if (this->has_acc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acc(this), target, stream);
  }

  // .rovio.Quatf quat = 4;
  if (this->has_quat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::quat(this), target, stream);
  }

  // float proxi = 5;
  if (!(this->proxi() <= 0 && this->proxi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_proxi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.InputInfo)
  return target;
}

size_t InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.InputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rovio.Vec3f gyr = 2;
  if (this->has_gyr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyr_);
  }

  // .rovio.Vec3f acc = 3;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // .rovio.Quatf quat = 4;
  if (this->has_quat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quat_);
  }

  // double t = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  // float proxi = 5;
  if (!(this->proxi() <= 0 && this->proxi() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.InputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.InputInfo)
    MergeFrom(*source);
  }
}

void InputInfo::MergeFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gyr()) {
    _internal_mutable_gyr()->::rovio::Vec3f::MergeFrom(from._internal_gyr());
  }
  if (from.has_acc()) {
    _internal_mutable_acc()->::rovio::Vec3f::MergeFrom(from._internal_acc());
  }
  if (from.has_quat()) {
    _internal_mutable_quat()->::rovio::Quatf::MergeFrom(from._internal_quat());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.proxi() <= 0 && from.proxi() >= 0)) {
    _internal_set_proxi(from._internal_proxi());
  }
}

void InputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInfo::CopyFrom(const InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {
  return true;
}

void InputInfo::InternalSwap(InputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gyr_, other->gyr_);
  swap(acc_, other->acc_);
  swap(quat_, other->quat_);
  swap(t_, other->t_);
  swap(proxi_, other->proxi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputInfoPack::InitAsDefaultInstance() {
}
class InputInfoPack::_Internal {
 public:
};

InputInfoPack::InputInfoPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.InputInfoPack)
}
InputInfoPack::InputInfoPack(const InputInfoPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rovio.InputInfoPack)
}

void InputInfoPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputInfoPack_rovio_2eproto.base);
}

InputInfoPack::~InputInfoPack() {
  // @@protoc_insertion_point(destructor:rovio.InputInfoPack)
  SharedDtor();
}

void InputInfoPack::SharedDtor() {
}

void InputInfoPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputInfoPack& InputInfoPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputInfoPack_rovio_2eproto.base);
  return *internal_default_instance();
}


void InputInfoPack::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.InputInfoPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear();
}

const char* InputInfoPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rovio.InputInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputInfoPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.InputInfoPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rovio.InputInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.InputInfoPack)
  return target;
}

size_t InputInfoPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.InputInfoPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rovio.InputInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputInfoPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.InputInfoPack)
  GOOGLE_DCHECK_NE(&from, this);
  const InputInfoPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputInfoPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.InputInfoPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.InputInfoPack)
    MergeFrom(*source);
  }
}

void InputInfoPack::MergeFrom(const InputInfoPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.InputInfoPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void InputInfoPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.InputInfoPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInfoPack::CopyFrom(const InputInfoPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.InputInfoPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfoPack::IsInitialized() const {
  return true;
}

void InputInfoPack::InternalSwap(InputInfoPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputInfoPack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputInfo::InitAsDefaultInstance() {
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->quaternion_ = const_cast< ::rovio::Quatf*>(
      ::rovio::Quatf::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->gyr_bias_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->acc_bias_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->pos_cov_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->vel_cov_ = const_cast< ::rovio::Mat3f*>(
      ::rovio::Mat3f::internal_default_instance());
  ::rovio::_OutputInfo_default_instance_._instance.get_mutable()->att_cov_ = const_cast< ::rovio::Vec3f*>(
      ::rovio::Vec3f::internal_default_instance());
}
class OutputInfo::_Internal {
 public:
  static const ::rovio::Vec3f& position(const OutputInfo* msg);
  static const ::rovio::Vec3f& velocity(const OutputInfo* msg);
  static const ::rovio::Quatf& quaternion(const OutputInfo* msg);
  static const ::rovio::Vec3f& gyr_bias(const OutputInfo* msg);
  static const ::rovio::Vec3f& acc_bias(const OutputInfo* msg);
  static const ::rovio::Vec3f& pos_cov(const OutputInfo* msg);
  static const ::rovio::Mat3f& vel_cov(const OutputInfo* msg);
  static const ::rovio::Vec3f& att_cov(const OutputInfo* msg);
};

const ::rovio::Vec3f&
OutputInfo::_Internal::position(const OutputInfo* msg) {
  return *msg->position_;
}
const ::rovio::Vec3f&
OutputInfo::_Internal::velocity(const OutputInfo* msg) {
  return *msg->velocity_;
}
const ::rovio::Quatf&
OutputInfo::_Internal::quaternion(const OutputInfo* msg) {
  return *msg->quaternion_;
}
const ::rovio::Vec3f&
OutputInfo::_Internal::gyr_bias(const OutputInfo* msg) {
  return *msg->gyr_bias_;
}
const ::rovio::Vec3f&
OutputInfo::_Internal::acc_bias(const OutputInfo* msg) {
  return *msg->acc_bias_;
}
const ::rovio::Vec3f&
OutputInfo::_Internal::pos_cov(const OutputInfo* msg) {
  return *msg->pos_cov_;
}
const ::rovio::Mat3f&
OutputInfo::_Internal::vel_cov(const OutputInfo* msg) {
  return *msg->vel_cov_;
}
const ::rovio::Vec3f&
OutputInfo::_Internal::att_cov(const OutputInfo* msg) {
  return *msg->att_cov_;
}
OutputInfo::OutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rovio.OutputInfo)
}
OutputInfo::OutputInfo(const OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::rovio::Vec3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::rovio::Vec3f(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_quaternion()) {
    quaternion_ = new ::rovio::Quatf(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  if (from._internal_has_gyr_bias()) {
    gyr_bias_ = new ::rovio::Vec3f(*from.gyr_bias_);
  } else {
    gyr_bias_ = nullptr;
  }
  if (from._internal_has_acc_bias()) {
    acc_bias_ = new ::rovio::Vec3f(*from.acc_bias_);
  } else {
    acc_bias_ = nullptr;
  }
  if (from._internal_has_pos_cov()) {
    pos_cov_ = new ::rovio::Vec3f(*from.pos_cov_);
  } else {
    pos_cov_ = nullptr;
  }
  if (from._internal_has_vel_cov()) {
    vel_cov_ = new ::rovio::Mat3f(*from.vel_cov_);
  } else {
    vel_cov_ = nullptr;
  }
  if (from._internal_has_att_cov()) {
    att_cov_ = new ::rovio::Vec3f(*from.att_cov_);
  } else {
    att_cov_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:rovio.OutputInfo)
}

void OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputInfo_rovio_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&position_)) + sizeof(err_code_));
}

OutputInfo::~OutputInfo() {
  // @@protoc_insertion_point(destructor:rovio.OutputInfo)
  SharedDtor();
}

void OutputInfo::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete quaternion_;
  if (this != internal_default_instance()) delete gyr_bias_;
  if (this != internal_default_instance()) delete acc_bias_;
  if (this != internal_default_instance()) delete pos_cov_;
  if (this != internal_default_instance()) delete vel_cov_;
  if (this != internal_default_instance()) delete att_cov_;
}

void OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputInfo& OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputInfo_rovio_2eproto.base);
  return *internal_default_instance();
}


void OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rovio.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gyr_bias_ != nullptr) {
    delete gyr_bias_;
  }
  gyr_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_bias_ != nullptr) {
    delete acc_bias_;
  }
  acc_bias_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pos_cov_ != nullptr) {
    delete pos_cov_;
  }
  pos_cov_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vel_cov_ != nullptr) {
    delete vel_cov_;
  }
  vel_cov_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && att_cov_ != nullptr) {
    delete att_cov_;
  }
  att_cov_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(err_code_));
  _internal_metadata_.Clear();
}

const char* OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rovio.RovioStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::rovio::RovioStatus>(val));
        } else goto handle_unusual;
        continue;
      // double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Quatf quaternion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f gyr_bias = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyr_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f acc_bias = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f pos_cov = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Mat3f vel_cov = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rovio.Vec3f att_cov = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_att_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float depth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .rovio.RovioErrCode err_code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_err_code(static_cast<::rovio::RovioErrCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rovio.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rovio.RovioStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // double timestamp = 2;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // .rovio.Vec3f position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .rovio.Vec3f velocity = 4;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // .rovio.Quatf quaternion = 5;
  if (this->has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::quaternion(this), target, stream);
  }

  // .rovio.Vec3f gyr_bias = 6;
  if (this->has_gyr_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gyr_bias(this), target, stream);
  }

  // .rovio.Vec3f acc_bias = 7;
  if (this->has_acc_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::acc_bias(this), target, stream);
  }

  // .rovio.Vec3f pos_cov = 8;
  if (this->has_pos_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pos_cov(this), target, stream);
  }

  // .rovio.Mat3f vel_cov = 9;
  if (this->has_vel_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::vel_cov(this), target, stream);
  }

  // .rovio.Vec3f att_cov = 10;
  if (this->has_att_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::att_cov(this), target, stream);
  }

  // float depth = 11;
  if (!(this->depth() <= 0 && this->depth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_depth(), target);
  }

  // .rovio.RovioErrCode err_code = 12;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rovio.OutputInfo)
  return target;
}

size_t OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rovio.OutputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rovio.Vec3f position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .rovio.Vec3f velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .rovio.Quatf quaternion = 5;
  if (this->has_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  // .rovio.Vec3f gyr_bias = 6;
  if (this->has_gyr_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyr_bias_);
  }

  // .rovio.Vec3f acc_bias = 7;
  if (this->has_acc_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_bias_);
  }

  // .rovio.Vec3f pos_cov = 8;
  if (this->has_pos_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_cov_);
  }

  // .rovio.Mat3f vel_cov = 9;
  if (this->has_vel_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_cov_);
  }

  // .rovio.Vec3f att_cov = 10;
  if (this->has_att_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *att_cov_);
  }

  // double timestamp = 2;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // .rovio.RovioStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float depth = 11;
  if (!(this->depth() <= 0 && this->depth() >= 0)) {
    total_size += 1 + 4;
  }

  // .rovio.RovioErrCode err_code = 12;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rovio.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rovio.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rovio.OutputInfo)
    MergeFrom(*source);
  }
}

void OutputInfo::MergeFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rovio.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::rovio::Vec3f::MergeFrom(from._internal_position());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::rovio::Vec3f::MergeFrom(from._internal_velocity());
  }
  if (from.has_quaternion()) {
    _internal_mutable_quaternion()->::rovio::Quatf::MergeFrom(from._internal_quaternion());
  }
  if (from.has_gyr_bias()) {
    _internal_mutable_gyr_bias()->::rovio::Vec3f::MergeFrom(from._internal_gyr_bias());
  }
  if (from.has_acc_bias()) {
    _internal_mutable_acc_bias()->::rovio::Vec3f::MergeFrom(from._internal_acc_bias());
  }
  if (from.has_pos_cov()) {
    _internal_mutable_pos_cov()->::rovio::Vec3f::MergeFrom(from._internal_pos_cov());
  }
  if (from.has_vel_cov()) {
    _internal_mutable_vel_cov()->::rovio::Mat3f::MergeFrom(from._internal_vel_cov());
  }
  if (from.has_att_cov()) {
    _internal_mutable_att_cov()->::rovio::Vec3f::MergeFrom(from._internal_att_cov());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.depth() <= 0 && from.depth() >= 0)) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rovio.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rovio.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {
  return true;
}

void OutputInfo::InternalSwap(OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(quaternion_, other->quaternion_);
  swap(gyr_bias_, other->gyr_bias_);
  swap(acc_bias_, other->acc_bias_);
  swap(pos_cov_, other->pos_cov_);
  swap(vel_cov_, other->vel_cov_);
  swap(att_cov_, other->att_cov_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
  swap(depth_, other->depth_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rovio
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rovio::Vec3f* Arena::CreateMaybeMessage< ::rovio::Vec3f >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::Vec3f >(arena);
}
template<> PROTOBUF_NOINLINE ::rovio::Mat3f* Arena::CreateMaybeMessage< ::rovio::Mat3f >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::Mat3f >(arena);
}
template<> PROTOBUF_NOINLINE ::rovio::Quatf* Arena::CreateMaybeMessage< ::rovio::Quatf >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::Quatf >(arena);
}
template<> PROTOBUF_NOINLINE ::rovio::InputInfo* Arena::CreateMaybeMessage< ::rovio::InputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rovio::InputInfoPack* Arena::CreateMaybeMessage< ::rovio::InputInfoPack >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::InputInfoPack >(arena);
}
template<> PROTOBUF_NOINLINE ::rovio::OutputInfo* Arena::CreateMaybeMessage< ::rovio::OutputInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rovio::OutputInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
